{"ast":null,"code":"var _jsxFileName = \"/home/steffen/udacity/solution_project_trivia/frontend/src/components/QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`,\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"choose-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \" Choose Category \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 75\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, \" ALL \"), \" \", Object.keys(this.state.categories).map(id => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 30\n        }\n      }, \" \", this.state.categories[id], \" \");\n    }), \" \"), \" \");\n  }\n\n  renderFinalScore() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"final-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \" Your Final Score is \", this.state.numCorrect, \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 19\n      }\n    }, \" Play Again ? \"), \" \");\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \" \", this.state.currentQuestion.question, \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: `${evaluate ? 'correct' : 'wrong'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 19\n      }\n    }, \" \", evaluate ? \"You were correct!\" : \"You were incorrect\", \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 19\n      }\n    }, \" \", this.state.currentQuestion.answer, \" \"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, \" Next Question \"), \" \");\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, \" \", this.state.currentQuestion.question, \" \"), \" \", /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 16\n      }\n    })), \" \");\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["/home/steffen/udacity/solution_project_trivia/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            categories: {},\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false\n        }\n    }\n\n    componentDidMount() {\n        $.ajax({\n            url: `/categories`, //TODO: update request URL\n            type: \"GET\",\n            success: (result) => {\n                this.setState({\n                    categories: result.categories\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load categories. Please try your request again')\n                return;\n            }\n        })\n    }\n\n    selectCategory = ({\n        type,\n        id = 0\n    }) => {\n        this.setState({\n            quizCategory: {\n                type,\n                id\n            }\n        }, this.getNextQuestion)\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    getNextQuestion = () => {\n        const previousQuestions = [...this.state.previousQuestions]\n        if (this.state.currentQuestion.id) {\n            previousQuestions.push(this.state.currentQuestion.id)\n        }\n\n        $.ajax({\n            url: '/quizzes', //TODO: update request URL\n            type: \"POST\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\n                previous_questions: previousQuestions,\n                quiz_category: this.state.quizCategory\n            }),\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            success: (result) => {\n                this.setState({\n                    showAnswer: false,\n                    previousQuestions: previousQuestions,\n                    currentQuestion: result.question,\n                    guess: '',\n                    forceEnd: result.question ? false : true\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load question. Please try your request again')\n                return;\n            }\n        })\n    }\n\n    submitGuess = (event) => {\n        event.preventDefault();\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n        let evaluate = this.evaluateAnswer()\n        this.setState({\n            numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n            showAnswer: true,\n        })\n    }\n\n    restartGame = () => {\n        this.setState({\n            quizCategory: null,\n            previousQuestions: [],\n            showAnswer: false,\n            numCorrect: 0,\n            currentQuestion: {},\n            guess: '',\n            forceEnd: false\n        })\n    }\n\n    renderPrePlay() {\n        return ( <\n                div className = \"quiz-play-holder\" >\n                <\n                div className = \"choose-header\" > Choose Category < /div> <\n                div className = \"category-holder\" >\n                <\n                div className = \"play-category\"\n                onClick = {\n                    this.selectCategory\n                } > ALL < /div> {\n                Object.keys(this.state.categories).map(id => {\n                    return ( <\n                        div key = {\n                            id\n                        }\n                        value = {\n                            id\n                        }\n                        className = \"play-category\"\n                        onClick = {\n                            () => this.selectCategory({\n                                type: this.state.categories[id],\n                                id\n                            })\n                        } > {\n                            this.state.categories[id]\n                        } <\n                        /div>\n                    )\n                })\n            } <\n            /div> < /\n        div >\n    )\n}\n\nrenderFinalScore() {\n    return ( <\n        div className = \"quiz-play-holder\" >\n        <\n        div className = \"final-header\" > Your Final Score is {\n            this.state.numCorrect\n        } < /div> <\n        div className = \"play-again button\"\n        onClick = {\n            this.restartGame\n        } > Play Again ? < /div> < /\n        div >\n    )\n}\n\nevaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n}\n\nrenderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    let evaluate = this.evaluateAnswer()\n    return ( <\n        div className = \"quiz-play-holder\" >\n        <\n        div className = \"quiz-question\" > {\n            this.state.currentQuestion.question\n        } < /div> <\n        div className = {\n            `${evaluate ? 'correct' : 'wrong'}`\n        } > {\n            evaluate ? \"You were correct!\" : \"You were incorrect\"\n        } < /div> <\n        div className = \"quiz-answer\" > {\n            this.state.currentQuestion.answer\n        } < /div> <\n        div className = \"next-question button\"\n        onClick = {\n            this.getNextQuestion\n        } > Next Question < /div> < /\n        div >\n    )\n}\n\nrenderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ?\n        this.renderFinalScore() :\n        this.state.showAnswer ?\n        this.renderCorrectAnswer() :\n        ( <\n            div className = \"quiz-play-holder\" >\n            <\n            div className = \"quiz-question\" > {\n                this.state.currentQuestion.question\n            } < /div> <\n            form onSubmit = {\n                this.submitGuess\n            } >\n            <\n            input type = \"text\"\n            name = \"guess\"\n            onChange = {\n                this.handleChange\n            }\n            /> <\n            input className = \"submit-guess button\"\n            type = \"submit\"\n            value = \"Submit Answer\" / >\n            <\n            /form> < /\n            div >\n        )\n}\n\n\nrender() {\n    return this.state.quizCategory ?\n        this.renderPlay() :\n        this.renderPrePlay()\n}\n}\n\nexport default QuizView;"]},"metadata":{},"sourceType":"module"}